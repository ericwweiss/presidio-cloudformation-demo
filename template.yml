AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template:
  Template that creates an instance with a single network interface
  and single static IP addresses in an existing VPC. It assumes you have already
  created a VPC.'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    ConstraintDescription: must be a valid EC2 instance type.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetId of an existing subnet (for the primary network) in your
      Virtual Private Cloud (VPC)
    ConstraintDescription: must be an existing subnet in the selected Virtual Private
      Cloud.
  PrimaryIPAddress:
    Type: String
    Description: Primary private IP. This must be a valid IP address for Subnet
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: must be a valid IP address of the form x.x.x.x.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Mappings:
  InstanceType:
    t1.micro:
      Arch: x64
  AWSRegionArchAMI2:
    us-east-1:
      x64: ami-0aeeebd8d2ab47354

Resources:
  KmsKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: KMS Symetric Key
      Enabled: true
      KeyPolicy:
        Version: 2012-10-17
        Id: presidio-poc
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
      KeySpec: SYMMETRIC_DEFAULT
      PendingWindowInDays: 7
  SecretManagerSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Secret encrypted with a KMS CMK
      GenerateSecretString:
        SecretStringTemplate: '{"username": "presidopoc"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '":;@/\'
      KmsKeyId: !Ref KmsKey
      Name: POCSecret
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPAssoc1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      NetworkInterfaceId: !Ref 'Eth0'
      AllocationId: !GetAtt [EIP1, AllocationId]
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
    InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: InstanceProfile
      Path: /
      Roles:
        - !Ref EC2Role
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: GetSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                  - 'kms:Decrypt'
                Resource:
                  - !Ref SecretManagerSecret
                  - !GetAtt KmsKey.Arn
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource:
                  - !GetAtt S3Bucket.Arn
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [AWSRegionArchAMI2, !Ref 'AWS::Region', !FindInMap [AWSRegionArchAMI2,
          !Ref 'InstanceType', Arch]]
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref 'Eth0'
        DeviceIndex: '0'
      Tags:
      - Key: Name
        Value: POC
            SubnetId:
        Fn::ImportValue:
              !Sub '${NetworkStackName}-PublicSubnet'
      SecurityGroupIds:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          aws secretsmanager get-secret-value \
            --region ${AWS::Region} \
            --secret-id POCSecret \
            --query SecretString \
            >> /home/ec2-user/secret.txt
  Eth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: eth0
      GroupSet: [!Ref 'SSHSecurityGroup']
      PrivateIpAddresses:
      - PrivateIpAddress: !Ref 'PrimaryIPAddress'
        Primary: 'true'
      SourceDestCheck: 'true'
      SubnetId: !Ref 'SubnetId'
      Tags:
      - Key: Name
        Value: Presidio POC Interface
      - Key: Interface
        Value: eth0

Outputs:
  InstanceId:
    Value: !Ref 'EC2Instance'
    Description: Instance Id of newly created instance
  EIP1:
    Value: !Join [' ', [IP address, !Ref 'EIP1', on subnet, !Ref 'SubnetId']]
    Description: Primary public IP of Eth0
  PrimaryPrivateIPAddress:
    Value: !Join [' ', [IP address, !GetAtt [Eth0, PrimaryPrivateIpAddress], on subnet,
        !Ref 'SubnetId']]
    Description: Primary private IP address of Eth0
